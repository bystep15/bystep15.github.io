<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>宝宝树前端团队</title>
    <description>宝宝树前端项目组技术博客，欢迎补充
</description>
    <link>http://bystep15.github.io//</link>
    <atom:link href="http://bystep15.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 26 Feb 2016 17:51:28 +0800</pubDate>
    <lastBuildDate>Fri, 26 Feb 2016 17:51:28 +0800</lastBuildDate>
    <generator>Jekyll v3.0.2</generator>
    
      <item>
        <title>http/2 试部署测试总结</title>
        <description>&lt;p&gt;HTTP/2 上线前期调研断断续续也有一段时间了，到此算是告一段落，所得到一些结论在这里给可能涉及到此项目的人分享一下。&lt;/p&gt;

&lt;h2 id=&quot;http2-&quot;&gt;HTTP/2 客户端兼容性问题&lt;/h2&gt;

&lt;p&gt;这这里先提供一个终端浏览器 H2 兼容性测试的小站点：&lt;br /&gt;
&lt;a href=&quot;https://www.h2statistics.ml/&quot;&gt;www.h2statistics.ml&lt;/a&gt;  (笔者原创^_^)&lt;/p&gt;

&lt;p&gt;HTTP/2 是由 SPDY 协议发展过来的，因各种历史遗留原因，H2 加上其前身 SPDY ，市面上能看到的版本由低到高大致有4个:
&lt;code class=&quot;highlighter-rouge&quot;&gt;spdy2 spdy3 spdy3.1 http/2&lt;/code&gt;，这个时候，你就要考虑客户端的兼容性问题了。&lt;/p&gt;

&lt;p&gt;在上面提供的站点里，你会看到当前的终端(浏览器)能够支持的&lt;strong&gt;最高&lt;/strong&gt;协议版本。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;采样统计结果&lt;/h3&gt;

&lt;p&gt;以下是目前为止对所做采样调研的统计图&lt;br /&gt;
&lt;img src=&quot;/images/http2/h2-1.png&quot; alt=&quot;HTTP/2 终端兼容性统计图&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;兼容性说明&lt;/h3&gt;

&lt;p&gt;在这里要注意一下几个情况：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;再说一遍，你所看到的是高最协议版本，不会向上兼容&lt;/li&gt;
  &lt;li&gt;向下兼容情况：支持 HTTP/2 的一定支持 SPDY3与SPDY3.1，但不一定支持 SPDY2 (如 Chrome、FF、IE)&lt;/li&gt;
  &lt;li&gt;同浏览器，同版本在不同终端设备上有可能支持的情况也不一样&lt;/li&gt;
  &lt;li&gt;webview 请参考自身的浏览器&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;如上图所示，SPDY3.1 的支持率已经达到 50%，再加上 HTTP/2 支持浏览器也可以支持 SPDY3.X 的比率，总共对 SPDY3.1 的支持率应该可以达到 &lt;strong&gt;75%&lt;/strong&gt; 左右。这对实际部署 H2 服务器的协议选择提供了一个有效的数据支持。&lt;/p&gt;

&lt;h2 id=&quot;http2--1&quot;&gt;HTTP/2 服务端兼容性情况&lt;/h2&gt;

&lt;p&gt;http/2 的正式版本刚发出不到一年时间，虽然之前就已经有各大 server 都已开始支持，详情见 &lt;a href=&quot;https://github.com/http2/http2-spec/wiki/Implementations&quot;&gt;H2 支持 server 一览表&lt;/a&gt;。
但所支持的 H2 版本有所差别，支持的方式也略有不同。&lt;/p&gt;

&lt;p&gt;在看了上面的浏览器兼容性情况后，你肯定会想到一个问题，浏览器支持的情况不尽相同，那服务端怎么处理，服务端能够自动降级吗？&lt;/p&gt;

&lt;p&gt;以下以 nodejs 和 nginx 为例，大致说一下服务端的支持情况以及协议降级的方案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/http2/h2-2.png&quot; alt=&quot;测试的服务端&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nginx&quot;&gt;nginx&lt;/h3&gt;

&lt;p&gt;nginx 从 1.5.10 到最新的稳定版 1.8.5，都可以支持到 SPDY3.1，&lt;strong&gt;但不会支持正式的 H2 协议&lt;/strong&gt;，所以想体验新协议的人只能去找开发版，而且是大于 1.9.5 的版本才行。&lt;/p&gt;

&lt;p&gt;笔者是在 1.8.5 和 1.9.8 上进行了测试。&lt;br /&gt;
1.8.5 只支持 SPDY3.x，这个倒也算正常，但 1.9.8 也是只支持 HTTP/2，不会做 SPDY 的降级处理，会直接降为 HTTP1.1，这个就有点不太厚道了。&lt;/p&gt;

&lt;h3 id=&quot;nodejs&quot;&gt;nodejs&lt;/h3&gt;

&lt;p&gt;nodejs 有专门的 HTTP/2 与 SPDY 模块，两者在降级的问题上解决的都非常优秀。以 SPDY@3.2.0 为例，会支持&lt;code class=&quot;highlighter-rouge&quot;&gt;spdy2 spdy3 spdy3.1 http/2&lt;/code&gt;四个协议，通过 ALPN/NPN 与浏览器进行协商所用哪种协议进行传输。甚至可以设定所部署哪几种协议，非常人性化。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;部署方案建议&lt;/h2&gt;

&lt;p&gt;在选择哪种协议的问题上，以目前已经全面部署 H2/SPDY 的一线站点为参照案例来看，国内外还是很有差别的。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;国外的完美部署方案&lt;/h3&gt;

&lt;p&gt;国外因为没有太多的非主流浏览器，浏览器的碎片化程度不高，对于浏览器的支持情况还是很理想的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/http2/h2-3.jpg&quot; alt=&quot;2015-8 全国浏览器占有率&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以如 Google、facebook 等大站都选择最正式的 HTTP/2 协议做为最高协议，然后依次降级。&lt;/p&gt;

&lt;p&gt;对于如何很好有降级，目前已经有较成熟的接入端的分发服务器的方案，可以在接入端进行 NPN 的协商，再分发给支持特定协议的服务器，这里提供一篇文章，大家有兴趣可以参考：&lt;br /&gt;
&lt;a href=&quot;https://www.igvita.com/2012/10/31/simple-spdy-and-npn-negotiation-with-haproxy/&quot;&gt;基于 HAProxy 的简单 SPDY 协议处理方案&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;国内的”重点照顾”方案&lt;/h3&gt;

&lt;p&gt;国内的浏览器情况。。。你懂的~~~ !-_-&lt;/p&gt;

&lt;p&gt;所以以 &lt;strong&gt;百度&lt;/strong&gt; 和 &lt;strong&gt;淘宝&lt;/strong&gt; 为例，都直接选择的是 SPDY3.1 协议进行部署，这样可以照顾到大多数的国内浏览器的支持情况，不支持的就自然降到 HTTP/1.1，这样在实施上简单不少，切中要点，也几乎没有损失，可以很平滑的过渡。笔者也建议如此。
&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;总之，HTTP/2 是目前唯一的 HTTP 协议发展趋势，它给整个互联网带来的优化还是很明显（具体分析可看笔者之前的 &lt;a href=&quot;http://yj1438.github.io/2015/11/09/http2.html&quot;&gt;HTTP/2 简介&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;再者 HTTPS 也越来越普及的环境下，为何不趋势把 HTTP/2 也搞定呢。&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Feb 2016 14:49:42 +0800</pubDate>
        <link>http://bystep15.github.io//front/article/2016/02/03/http2_statistics.html</link>
        <guid isPermaLink="true">http://bystep15.github.io//front/article/2016/02/03/http2_statistics.html</guid>
        
        
        <category>front</category>
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>焦点图进阶</title>
        <description>&lt;p&gt;新新的Show Time ^_^&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.baidu.com/logo.jpg&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Wed, 03 Feb 2016 14:49:42 +0800</pubDate>
        <link>http://bystep15.github.io//front/article/2016/02/03/%E7%84%A6%E7%82%B9%E5%9B%BE%E8%BF%9B%E9%98%B6.html</link>
        <guid isPermaLink="true">http://bystep15.github.io//front/article/2016/02/03/%E7%84%A6%E7%82%B9%E5%9B%BE%E8%BF%9B%E9%98%B6.html</guid>
        
        
        <category>front</category>
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>Jekyll使用指南</title>
        <description>&lt;p&gt;【简译By&lt;a href=&quot;http://wumingli.github.io/about/&quot;&gt;武明礼&lt;/a&gt;，见笑。。。】&lt;/p&gt;

&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;(noted by translator: &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;), which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;你会在你的&lt;code class=&quot;highlighter-rouge&quot;&gt;“_posts”&lt;/code&gt;文件夹中找到这篇文章；前去编辑并且重新编译站点，你会看到变化；
你可以用各种不同方式编译你的站点，但最常用的方式是通过运行&lt;code class=&quot;highlighter-rouge&quot;&gt;“jekyll serve”&lt;/code&gt;命令(译者注：实时看到更改，用以下命令&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;)，该方式会启动一个Web Server，并且当文件改动时可以自动生成你的站点。&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;添加新文章非常简单，在“_posts”文件夹下添加即可，需要遵守以下命名格式：&lt;code class=&quot;highlighter-rouge&quot;&gt;“YYYY-MM-DD-name-of-post.ext”&lt;/code&gt;，文件头需要包含必要的内容。你可以查看本文的源文件，就会知道它是如何工作的了。&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;p&gt;Jekyll 还提供了强大的代码高亮支持：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;前往 &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; 查看更多信息，以充分了解Jekyll的功能。查看提交：&lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;。如果还有问题，可以在Jekyll Talk上提出：&lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;本地安装jelyll，参见：&lt;a href=&quot;https://help.github.com/articles/setting-up-your-pages-site-locally-with-jekyll/&quot;&gt;Setting up your Pages site locally with Jekyll&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Feb 2016 14:49:42 +0800</pubDate>
        <link>http://bystep15.github.io//front/article/2016/02/03/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://bystep15.github.io//front/article/2016/02/03/welcome-to-jekyll.html</guid>
        
        
        <category>front</category>
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>CSS3动画和JS动画的性能比较</title>
        <description>&lt;p&gt;这篇文章翻译自 Julian Shapiro 的 &lt;a href=&quot;http://davidwalsh.name/css-js-animation&quot;&gt;CSS vs. JS Animation: Which is Faster?&lt;/a&gt;。Julian Shapiro 也是 &lt;a href=&quot;http://julian.com/research/velocity/&quot;&gt;Velocity.js&lt;/a&gt; 的创造者。这是一个非常高效、简单易用的JS动画库。他在Web动画方面有很高的造诣。&lt;/p&gt;

&lt;p&gt;Javascript 动画怎么可能总是和 CSS transition 一样快，甚至更快呢？到底是什么秘密呢？Adobe 和 Google 是怎么做到让他们的富媒体移动网站的速度和 native app 媲美的？&lt;/p&gt;

&lt;p&gt;这篇文章会一步步告诉你为什么&lt;code class=&quot;highlighter-rouge&quot;&gt;基于 Javascript 的 DOM 动画库（比如 Velocity.js 和 GSAP）能够比 jQuery 和基于 CSS 的动画库更高效&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;jQuery
让我们从基本开始说起： Javascript 和 jQuery 两者不能混为一谈。Javascript 动画很快，而 jQuery 动画很慢。为什么呢？因为尽管 jQuery 异常强大，但是它的设计目标并不是一个高效的动画引擎：&lt;/p&gt;

&lt;p&gt;jQuery 不能避免 layout thrashing （有人喜欢将其翻译为“布局颠簸”，会导致多余&lt;code class=&quot;highlighter-rouge&quot;&gt;relayout/reflow&lt;/code&gt;），因为它的代码不仅仅用于动画，它还用于很多其他场景。&lt;/p&gt;

&lt;p&gt;jQuery的内存消耗较大，经常会触发垃圾回收。而垃圾回收触发时很容易让动画卡住。&lt;/p&gt;

&lt;p&gt;jQuery&lt;code class=&quot;highlighter-rouge&quot;&gt;使用了setInterval而不是 reqeustAnimationFrame(RAF)&lt;/code&gt;，因为 RAF 会在窗口失去焦点时停止触发，这会导致jQuery的bug。（目前jQuery已经使用了RAF）&lt;/p&gt;

&lt;p&gt;注意 layout thrashing 会导致动画在开始的时候卡顿，垃圾回收的触发会导致动画运行过程中的卡顿，不使用 RAF 则会导致动画帧率低。&lt;/p&gt;

&lt;p&gt;实现样例
为了避免layout thrashing，我们需要批量访问和更新DOM。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;currentLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* 有 layout thrashing. */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;currentTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 访问 */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 更新 */&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;currentLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 访问 */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 更新 */&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* 没有 layout thrashing. */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;currentTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 访问 */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;currentLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 访问 */&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 更新 */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentLeft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 更新 */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在更新操作之后的访问操作会强制浏览器重新计算页面元素的样式（因为要将更新的样式应用上去才能获取正确的值）。这在一般操作下没多大的性能损失，但是放在间隔仅仅16ms的动画中则会导致显著的性能开销。只需要稍微改动下操作的顺序就可以大大提高动画的性能。&lt;/p&gt;

&lt;p&gt;类似地，使用 RAF 也不会让你大量重构代码。让我们来比较下使用 RAF 和使用 setInterval 的区别：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startingTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* setInterval: Runs every 16ms to achieve 60fps (1000ms/60 ~= 16ms). */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Since this ticks 60 times a second, we divide the top property&#39;s increment of 1 unit per 1 second by 60. */&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startingTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* requestAnimationFrame: Attempts to run at 60fps based on whether the browser is in an optimal state. */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tick&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startingTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;你只需要稍微修改下代码来使用 RAF，就可以让你的动画性能有巨大的提高。&lt;/p&gt;

&lt;p&gt;CSS Transition
CSS transition 的动画逻辑是由浏览器来执行，所以它的性能能够比 jQuery 动画好。它的优势体现在：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;通过优化 DOM 操作，避免内存消耗来减少卡顿&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用与 RAF 类似的机制&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;强制使用硬件加速 （通过 GPU 来提高动画性能）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;然而实际上Javascript也可以使用这些优化。GSAP 已经做这些优化很久了。Velocity.js 是一个新兴的动画引擎，它不仅仅做了这些优化，甚至走的更远些。我们稍后会谈到这些。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;面对事实，让 Javascript 动画得以媲美 CSS 动画的性能只是我们伟大计划的第一步。第二步才是重头戏，要让 Javascript 动画比 CSS 动画还要快！&lt;/p&gt;

&lt;p&gt;让我们来看看 CSS 动画库的缺陷吧：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Transition 强制使用了 GPU 的硬件加速。导致浏览器一直处于高负荷运转的状态，这反而会让动画变的卡顿。这在移动浏览器上更为严重。（特别要说明的是，当数据在浏览器的主线程和合成线程之间频繁传输的时候特别消耗性能，故容易导致卡顿。某些 CSS 属性，不会受到影响。Adobe 的博客谈到过这个问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;IE 10以下的浏览器不支持 transition。而目前 IE8 和 IE9 还是很流行的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;transition 不能完全被 Javascript 控制（只能通过 Javascript 来触发 transition），因为浏览器不知道如何同时让 Javascript 控制动画又同时优化动画的性能。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;反过来说： 基于 Javascript 可以决定什么时候启用硬件加速，它可以支持全版本的 IE，并且它完全可以进行批量动画的优化。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我的建议是：当你只在移动平台上开发，并且动画只是简单的状态切换，那么适合用纯 CSS transition。在这种情况下，transition 是高性能的原生支持方案。它可以让你将动画逻辑放在样式文件里面，而不会让你的页面充斥 Javascript 库。然而如果你在设计很复杂的富客户端界面或者在开发一个有着复杂UI状态的 app。那么我推荐你使用一个动画库，这样你的动画可以保持高效，并且你的工作流也更可控。有一个特别的库做的特别棒，它可以用 Javascript 控制 CSS transition。这就是 Transit。&lt;/p&gt;

&lt;h3 id=&quot;javascript-&quot;&gt;Javascript 动画&lt;/h3&gt;

&lt;p&gt;所以 Javascript 可以比 CSS transition 性能更好。但是它到底有多块呢？它快到足够可以构建一个3D 动画的demo，通常需要用到 WebGL 才能完成。并且它快到足够搭建一个多媒体小动画，通常需要 Flash 或者 After Effects 才能完成。并且它还快到可以构建一个虚拟世界，通常需要 canvas 才能完成。&lt;/p&gt;

&lt;p&gt;为了更直接的来比较主流动画库的性能，包括 Transit（使用了 CSS transition），让我们打开Velocity的官方文档。&lt;/p&gt;

&lt;p&gt;之前那个问题还在：Javascript 是如何达到高性能的呢？下面是一个列表，列举了基于 Javascript 的动画库能做的事情：&lt;/p&gt;

&lt;p&gt;同步DOM -&amp;gt; 在整个动画链中微调堆栈以达到最小的layout thrashing。
缓存链式操作中的属性值，这样可以最小化DOM的查询操作（这就是高性能 DOM 动画的阿喀琉斯之踵）&lt;/p&gt;

&lt;p&gt;在同一个跨同层元素的调用中缓存单位转化比率（例如px转换成%、em等等单位）&lt;/p&gt;

&lt;p&gt;忽略那些变动小到根本看不出来的DOM更新&lt;/p&gt;

&lt;p&gt;让我们重新温习下之前学到的关于layout thrashing的知识点。Velocity.js 运用了这些最佳实践，缓存了动画结束时的属性值，在紧接的下一次动画开始时使用。这样可以避免重新查询动画的起始属性值。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$element&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Slide the element down into view. */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;velocity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;50%&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* After a delay of 1000ms, slide the element out of view. */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;velocity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-50%&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在上面的样例中，第二次调用 Velocity 时已经知道了 opacity 的起始值为 1，top 的值为 50%。&lt;/p&gt;

&lt;p&gt;浏览器也可以使用与此类似的优化，但是要做这些事情太过激进，使用场景也会受到限制，开发者就有可能会写出有bug的动画代码。jQuery就是因为这个原因没有使用RAF（如上所说），浏览器永远不会强行实施可能打破规范或者可能偏离期望行为的优化。&lt;/p&gt;

&lt;h3 id=&quot;javascriptvelocityjs--gsap&quot;&gt;最后，让我们来比较下两个Javascript框架（velocity.js 和 GSAP）。&lt;/h3&gt;

&lt;p&gt;GASP 是一个快速且功能丰富的动画平台。Velocity则更为轻量级，它大大地改善了UI动画性能和工作流程。&lt;/p&gt;

&lt;p&gt;GSAP 需要付费才能用于商业产品。Velocity 是完全免费的，它使用了自由度极高的 MIT 协议。&lt;/p&gt;

&lt;p&gt;性能方面，两者几乎相当，很难区分胜负。&lt;/p&gt;

&lt;p&gt;我个人推荐在你需要如下功能时使用 GSAP：精确控制时间（例如 remapping，暂停/继续/跳过），或者需要动作（例如：贝赛尔曲线路径），又或者复杂的动画组合/队列。这些特性对游戏开发或者复杂的应用很重要，但是对普通的 web app 的 UI 不太需要。
Velocity.js&lt;/p&gt;

&lt;p&gt;之前提到了 GSAP 有着丰富的功能，但这不代表 Velocity 的功能简单。相反的，Velocity 在 zip 压缩之后只有 7kb，它不仅仅实现了 jQuery animate 方法的所有功能，还包含了 颜色、transforms、loop、easings、class 动画和滚动动画等功能。&lt;/p&gt;

&lt;p&gt;简单的说就是 Velocity 包含了 jQuery、 jQuery UI 和 CSS transition 的功能。&lt;/p&gt;

&lt;p&gt;更进一步从易用性的角度来讲，Velocity 使用了 jQuery 的$.queue() 方法，因此可以无缝过渡到 jQuery 的$.animate()、$.fade()和$.delay()方法。并且 Velocity 的语法和$.animate()一摸一样，所以我们根本不需要修改页面的现有代码。&lt;/p&gt;

&lt;p&gt;让我们快速过一下 Velocity.js 的例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$element&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Use Velocity to animate the element&#39;s top property over a duration of 2000ms. */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;velocity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;50%&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Use a standard jQuery method to fade the element out once Velocity is done animating top. */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fadeOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如下是一个高级用法：滚动网页到当前元素并且旋转元素。这样的动画只需要简单的几行代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$element&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Scroll the browser to the top of this element over a duration of 1000ms. */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;velocity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scroll&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* Then rotate the element around its Y axis by 360 degrees. */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;velocity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rotateY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;360deg&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;Velocity 的目标是成为 DOM 动画领域性能最好易用性最高的库。这篇文章主要关注了性能方面。易用性方面可以前往 VelocityJS.org 了解。&lt;/p&gt;

&lt;p&gt;在结束之前，请记住一个高性能的 UI 绝不仅仅是选择一个正确的动画库。页面上的其他代码也需要优化。可以看看Google那些非常棒的演讲：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=n8ep4leoN9A&quot;&gt;Jank Free&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=cmZqLzPy0XE&quot;&gt;Rendering Without Lumps&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.devoxx.com/display/DV12/Faster+Websites++Crash+Course+on+Frontend+Performance&quot;&gt;Faster Websites&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 03 Feb 2016 14:49:42 +0800</pubDate>
        <link>http://bystep15.github.io//front/article/2016/02/03/CSS3%E5%8A%A8%E7%94%BB%E5%92%8CJS%E5%8A%A8%E7%94%BB%E7%9A%84%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90.html</link>
        <guid isPermaLink="true">http://bystep15.github.io//front/article/2016/02/03/CSS3%E5%8A%A8%E7%94%BB%E5%92%8CJS%E5%8A%A8%E7%94%BB%E7%9A%84%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90.html</guid>
        
        
        <category>front</category>
        
        <category>article</category>
        
      </item>
    
  </channel>
</rss>
